name: Build and Release Monte-Carlo or-plugin

on:
  push:
    branches: [ master ]        # auto-publish on every commit to master
  pull_request:
    branches: [ master ]        # CI for PRs
  workflow_dispatch:            # manual “Run workflow” button
    inputs:
      publish_release:
        description: "Publish a GitHub Release (true/false)"
        required: false
        default: "true"
        type: boolean

# Prevent older runs on the same branch from wasting minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 17 + Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle          # replaces the old actions/cache step

      - name: Prepare Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build & create fat-JAR
        run: ./gradlew --no-daemon clean shadowJar

      - name: Upload fat-JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: openrocket-fat-jar
          path: build/libs/*-all.jar
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write           # required for tag & release

    # Run automatically on master pushes, or when manually triggered
    if: >
      (github.event_name == 'workflow_dispatch' && inputs.publish_release == 'true')

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: openrocket-fat-jar
          path: artifacts

      - name: Checkout source (for version probing & optional tag push)
        uses: actions/checkout@v4

      - name: Extract version from Gradle
        id: version
        run: |
          VERSION=$(./gradlew properties -q | grep "^version:" | awk '{print $2}')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release (attaches JAR)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: artifacts/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: push the tag back to the repo so it shows up under “Tags”
      - name: Push tag to repository
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.version.outputs.version }} || true
          git push origin ${{ steps.version.outputs.version }} --no-verify

