plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'application'
}

group 'com.waterloorocketry'
version '1.0.0'

ext {
    openRocketVersion = '24.12.RC.01'
}

application {
    mainClass = "com.waterloorocketry.openrocket_monte_carlo.Main"
}

// Detect OS and set the appropriate gradlew command
def gradleWrapper = System.getProperty('os.name').toLowerCase().contains('windows') ? 'gradlew.bat' : './gradlew'

def findExtensions() {
    def dirs = []
    def extensionsDir = file('extensions')

    if (extensionsDir.exists()) {
        extensionsDir.eachDir { ext ->
            dirs += ext
        }
    }
    print("Found " + dirs.toString())
    return dirs
}

def extensions = findExtensions()

repositories {
    flatDir {
        dirs 'openrocket/build/libs'
    }
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['or-monte-carlo/src']  // Using list syntax for consistency
        }
        resources {
            srcDirs = ['or-monte-carlo/src/main/resources']
        }
    }
}

dependencies {
    implementation name: 'OpenRocket', version: openRocketVersion, group: 'info.openrocket'

    extensions.each { extensionDir ->
        def libsDir = new File(extensionDir, 'build/libs')
        if (libsDir.exists()) {
            runtimeOnly files(libsDir.listFiles().findAll { it.name.endsWith('.jar') })
        }
    }

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

// Java configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    // Ensure consistent encoding and compatibility
    compileJava {
        options.encoding = 'UTF-8'
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}


tasks.register('buildOpenRocket', Exec) {
    workingDir 'openrocket'
    def jarFile = file("openrocket/build/libs/OpenRocket-${openRocketVersion}.jar")

    commandLine gradleWrapper, 'build', '-x', 'test'

    onlyIf {
        !jarFile.exists()
    }
}

tasks.register('cleanOpenRocket', Exec) {
    workingDir 'openrocket'

    commandLine gradleWrapper, 'clean'
}

tasks.register('runOpenRocket', JavaExec) {
    dependsOn buildOpenRocket
    classpath = files("openrocket/build/libs/OpenRocket-${openRocketVersion}.jar")
    mainClass = 'info.openrocket.swing.startup.SwingStartup'
}

extensions.each { extensionDir ->
    tasks.register("build_${extensionDir.name}", Exec) {
        workingDir extensionDir
        commandLine gradleWrapper, 'build'
    }
    tasks.register("clean_${extensionDir.name}", Exec) {
        workingDir extensionDir
        commandLine gradleWrapper, 'clean'
    }
}

tasks.register('buildExtensions') {
    dependsOn buildOpenRocket

    extensions.each { extensionDir ->
        dependsOn tasks.named("build_${extensionDir.name}")
    }
}

tasks.register('cleanExtensions') {
    extensions.each {
        extensionDir -> dependsOn tasks.named("clean_${extensionDir.name}")
    }
}

// Make sure the submodule builds before the main build
tasks.named('build') {
    dependsOn buildOpenRocket
}

tasks.named('clean') {
    dependsOn cleanOpenRocket
    dependsOn cleanExtensions
}

tasks.named('run', JavaExec) {
    dependsOn build
    systemProperties = System.properties

    mainClass = 'com.waterloorocketry.openrocket_monte_carlo.Main'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'java.library.path', 'build/natives/lib'
}

shadowJar {
    dependsOn(distTar, distZip, buildExtensions, buildOpenRocket)
    archiveClassifier.set("all")
    archiveVersion.set(version.toString())
    archiveBaseName.set("WaterlooRocketry-OpenRocket")
}
